<?php
/**
 * WooCommerce Navigation
 * NOTE: DO NOT edit this file in WooCommerce core, this is generated from woocommerce-admin.
 *
 * @package Woocommerce Admin
 */

namespace Automattic\WooCommerce\Admin\Features;

/**
 * Contains logic for the WooCommerce Navigation.
 */
class Navigation {
	/**
	 * Class instance.
	 *
	 * @var Navigation instance
	 */
	protected static $instance = null;

	/**
	 * Array index of menu capability.
	 *
	 * @var int
	 */
	const CAPABILITY = 1;

	/**
	 * Array index of menu CSS class string.
	 *
	 * @var int
	 */
	const CSS_CLASSES = 4;

	/**
	 * Array index of menu handle.
	 *
	 * @var int
	 */
	const HANDLE = 5;

	/**
	 * Store related capabilities.
	 *
	 * @var array
	 */
	protected $store_capabilities = array(
		'manage_woocommerce',
		'edit_products',
		'view_woocommerce_reports',
	);

	/**
	 * Menu items that are permanently visible.
	 *
	 * @var array
	 */
	protected $permanent_items = array(
		'menu-dashboard',
		'toplevel_page_woocommerce',
	);

	/**
	 * Store related post types.
	 *
	 * @var array
	 */
	protected $post_types = array(
		'product',
		'shop_coupon',
		'shop_order',
	);

	/**
	 * Store related plugin page handles.
	 *
	 * @var array
	 */
	protected $plugin_pages = array(
		'wc-admin',
		'wc-reports',
		'wc-settings',
		'wc-status',
		'wc-addons',
	);

	/**
	 * Get class instance.
	 */
	final public static function instance() {
		if ( ! static::$instance ) {
			static::$instance = new static();
		}
		return static::$instance;
	}

	/**
	 * Hook into WooCommerce.
	 */
	public function init() {
		add_action( 'after_setup_theme', array( $this, 'maybe_enable_navigation' ) );
	}

	/**
	 * Enable store navigation unless disabled.
	 */
	public function maybe_enable_navigation() {
		if ( is_admin() && ! apply_filters( 'woocommerce_use_legacy_navigation', false ) ) {
			add_filter( 'add_menu_classes', array( $this, 'update_navigation' ) );
		}
	}

	/**
	 * Update dashboard menu for site or store dashboard.
	 *
	 * @param array $menu Top level dashboard menu items.
	 * @return array
	 */
	public function update_navigation( $menu ) {
		global $pagenow, $plugin_page, $typenow;

		$store_capabilities = apply_filters( 'woocommerce_navigation_store_capabilities', $this->store_capabilities );
		$permanent_items    = apply_filters( 'woocommerce_navigation_permanent_items', $this->permanent_items );
		$post_types         = apply_filters( 'woocommerce_navigation_post_types', $this->post_types );

		if ( ! empty( $plugin_page ) ) {
			$plugin_pages    = apply_filters( 'woocommerce_navigation_plugin_pages', $this->plugin_pages );
			$plugin_prefixes = [];
			foreach ( $plugin_pages as $prefix ) {
				$plugin_prefixes[] = 'toplevel_page_' . $prefix;
			}
		}

		$managing_store = false;
		foreach ( $menu as $index => $item ) {
			// Skip separators.
			if ( ! isset( $item[ self::HANDLE ] ) ) {
				continue;
			}
			// Only check menu items with store capabilities to determine whether we are on a store screen.
			if ( in_array( $item[ self::CAPABILITY ], $store_capabilities, true ) ) {
				// Is it a store post type.
				if ( $typenow && in_array( $typenow, $post_types, true ) ) {
					$managing_store = true;
					break;
				}

				// Is it a store plugin page.
				if ( ! empty( $plugin_page ) ) {
					foreach ( $plugin_prefixes as $plugin_prefix ) {
						if ( 0 === strpos( $item[ self::HANDLE ], $plugin_prefix ) ) {
							$managing_store = true;
							break 2;
						}
					}
				}
			}
		}

		foreach ( $menu as $index => $item ) {
			// Skip separators and permanent pages.
			if ( ! isset( $item[ self::HANDLE ] ) || in_array( $item[ self::HANDLE ], $permanent_items, true ) ) {
				continue;
			}

			// Hide menu items if they don't match the current site/store context.
			$is_store_page = in_array( $item[ self::CAPABILITY ], $store_capabilities, true );
			if ( $is_store_page !== $managing_store ) {
				$menu[ $index ][ self::CSS_CLASSES ] .= ' hide-if-js';
			}
		}

		return $menu;
	}
}
